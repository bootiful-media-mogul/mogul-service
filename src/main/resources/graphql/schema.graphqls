
#@specifiedBy(url: "https://scalars.graphql.org/andimarek/date-time.html")

scalar DateTime
scalar JSON


type Setting {
    name: String
    value: String
    valid: Boolean
}

type Composition  {
    id: Int
    mogulId: Int
    field:String
    attachments: [Attachment]
}

type Transcript {
    id: Int
    mogulId: Int
    transcript: String
}

type Attachment {
    id: Int
    caption: String
    managedFile: ManagedFile
    markdown: String
}

type Publication {
    mogulId: Int
    id: Int
    plugin: String
    url: String
    created: DateTime
    published: DateTime
    state : String
    outcomes: [PublicationOutcome]
}

type PublicationOutcome  {

    id: Int
    created: DateTime
    success: Boolean
    url:String
    key:String
    serverErrorMessage:String

}

type SettingsPage {
    valid    : Boolean
    category : String
    settings : [Setting]
}

type Mogul {
    id: Int
    name : String
    givenName : String
    familyName : String
    email : String
}

type ManagedFile {
    id: Int
    bucket: String
    folder: String
    filename: String
    contentType: String
    size: Float
    written : Boolean
    visible : Boolean
    url : String
    visibleUrl: String
    downloadableUrl: String
}

type Episode {
    id : Int
    titleComposition: Composition
    descriptionComposition: Composition
    availablePlugins :[String]
    title: String
    description: String
    valid: Boolean
    graphic: ManagedFile
    producedAudio: ManagedFile
    complete: Boolean
    created: Float
    segments : [Segment]
}

type Segment {
    id : Int
    name : String
    transcribable : Boolean
    audio: ManagedFile
    producedAudio : ManagedFile
    order : Int
    crossFadeDuration : Int
    transcript: Transcript

}

type Podcast {
    id: Int
    title: String
    episodes : [Episode]
    created: Float
}

type NotificationEvent {
    mogulId: Int
    category: String
    key: String
    when :  Float
    context : String
    modal : Boolean ,
    visible : Boolean
}

type Mutation {

    # transcriptions
    writeTranscript(transcriptId:Int, transcript:String) : Boolean
    refreshTranscript(transcriptId :Int) : Boolean

    # publicationService
    unpublish( publicationId: Int ) : Boolean
    publish( publishableId: Int, publishableType: String, contextJson: String, plugin: String ) : Boolean

    # compositions
    createCompositionAttachment( compositionId: Int ) : Attachment
    deleteCompositionAttachment( compositionAttachmentId: Int ) : Boolean

    # podcasts
    createPodcast(title:String): Podcast
    deletePodcast(podcastId:Int): Boolean
    updatePodcast(podcastId:Int, title:String ): Boolean

    # podcast episodes
    createPodcastEpisodeDraft(
        podcastId:Int ,
        title:String,
        description:String): Episode
    updatePodcastEpisode( podcastEpisodeId: Int, title: String, description: String): Boolean
    deletePodcastEpisode(podcastEpisodeId: Int): Boolean

    # podcast episode segments 
    deletePodcastEpisodeSegment(podcastEpisodeSegmentId: Int): Boolean
    createPodcastEpisodeSegment( podcastEpisodeId:  Int ): Int
    setPodcastEpisodeSegmentTranscript(podcastEpisodeSegmentId: Int , transcript: String) : Boolean
    transcribePodcastEpisodeSegment(podcastEpisodeSegmentId: Int ) : Boolean
    movePodcastEpisodeSegmentUp(podcastEpisodeId: Int, podcastEpisodeSegmentId: Int  ): Boolean
    movePodcastEpisodeSegmentDown(podcastEpisodeId: Int, podcastEpisodeSegmentId: Int  ): Boolean

    # managed files
    setManagedFileVisibility(managedFileId: Int , visible: Boolean): Boolean

    # settings
    updateSetting(category:String, name:String, value:String): Boolean
}

type AyrsharePublicationComposition {
    id: Int
    composition: Composition
    publication: Publication
    platform: String
}


type Searchable {
    id: ID!
    title: String
    description: String
}

type Query {


    # search
    search(query: String, metadata: JSON): [Searchable]

    ayrsharePublicationCompositions: [AyrsharePublicationComposition]

    # publicationService
    publicationsForPublishable( type : String, id: Int ) : [Publication]
    canPublish (publishableId: Int , publishableType: String , contextJson: String , plugin: String) : Boolean

    # compositions
    compositionById ( compositionId:Int) : Composition

    # misc 
    renderedMarkdown( markdown : String) : String

    # notifications
    notificationContext : NotificationContext

    # settings
    settings: [SettingsPage]

    # mogul
    me: Mogul

    # ai
    aiChat(prompt:String): String

    # podcasts
    podcastById(podcastId: Int): Podcast
    podcasts: [Podcast]
    podcastEpisodeById(podcastEpisodeId:Int):Episode
    podcastEpisodesByPodcast(podcastId:Int):[Episode]

    # managedFiles
    managedFileById( managedFileId: Int) : ManagedFile

    # ayrshare
    ayrsharePlatforms: [String]
}

type NotificationContext  {
    ablyChannel : String
    ablyTokenRequest : TokenRequest
}

type TokenRequest {
    keyName:String
    nonce: String
    mac:String
    ttl: String
    capability:String
    timestamp: String
}